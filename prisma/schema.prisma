// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  commentVotes      CommentVote[]
  pollOptionVotes   PollOptionVote[]
  id                String        @id
  issueVotes        IssueVote[]
  profilePictureUrl String?
  role              UserRole      @default(USER)
  sessions          Session[]
}

enum UserRole {
  USER
  ADMIN
}

model Session {
  id        String   @id
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Comment {
  archived  Boolean       @default(false)
  createdAt DateTime      @default(now())
  id        Int           @id @default(autoincrement())
  issue     Issue         @relation(fields: [issueId], references: [id])
  issueId   Int
  official  Boolean       @default(false)
  text      String
  votes     CommentVote[]
}

model CommentVote {
  comment   Comment @relation(fields: [commentId], references: [id])
  commentId Int
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    String

  @@unique([commentId, userId])
}

model Issue {
  archived                Boolean     @default(false)
  comments                Comment[]
  createdAt               DateTime    @default(now())
  description             String
  studentDiscordMessageId BigInt?
  councilDiscordMessageId BigInt?
  id                      Int         @id @default(autoincrement())
  title                   String      @db.VarChar(100)
  votes                   IssueVote[]
}

model IssueVote {
  id      Int    @id @default(autoincrement())
  issue   Issue  @relation(fields: [issueId], references: [id])
  issueId Int
  user    User   @relation(fields: [userId], references: [id])
  userId  String

  @@unique([issueId, userId])
}

model CouncilMember {
  login             String @id
  firstName         String
  lastName          String
  email             String @unique
  profilePictureUrl String
}

model PollOption {
  archived  Boolean       @default(false)
  createdAt DateTime      @default(now())
  id        Int           @id @default(autoincrement())
  poll      Poll          @relation(fields: [pollId], references: [id])
  pollId    Int
  text      String
  votes     PollOptionVote[]
}

model PollOptionVote {
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId Int
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    String

  @@unique([pollOptionId, userId])
}

model Poll {
  archived                Boolean     @default(false)
  options                 PollOption[]
  createdAt               DateTime    @default(now())
  description             String
  id                      Int         @id @default(autoincrement())
  title                   String      @db.VarChar(100)
}